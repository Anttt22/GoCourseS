FROM golang:alpine
#это убунту альпине с компилятором голанг

WORKDIR /app
#  директива если нет такой папки она ее создает и переходит в нее

COPY . . 
# копируем все файлы на докер машину в папку app

RUN go build main.go
#RUN go build -o main .

ENTRYPOINT ["./main"]
#то что будет запущенно когда мы напишем docker run

# замем в терминале запускаем команду docker build -t go-app
# с флагом -t передав имя нашего изображения после флага -t и указав
# в конце путь к нашему докер файлу. так как файл находиться в той же директории где мы выполняем команду просто ставим .
#docker run --name=go-web-app2 -p 80:8080 go-app
#где go-web-app2 это имя контейнер
# если docker run --rm -d -p 8080:8080 go-app то и контейнер назовется
# таким же именем как и образ
# --rm - когда закончу работу удалить контейнер 
# -d запустить бекграунды тоесть докер запуститься в бекгарунде и
# дальше можно будет работать
# -p binding портов или порт forward приложение стартует в докере на порту 8080 тоесть на порту
# машины 8080 можно достучаться до порта докера 8080
# go-app - имя образа на основе которого собирается коньейнер
#80:8080 - gпри запуске приложение оно запускается на порту 
# перед двоеточием тоесть все запросы на этот порт попадут
# на наш контейнер после двоеточия мы указали порт на который
# попадут все локальные запросы, 80 для локального порта и 8080 для порта на
# котором запускается наше приложение внутри контеййнера
# открывать localhost:80/docker  (/docker has a handler)
